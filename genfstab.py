#!/usr/bin/python3
# Created By: Fahad Ahammed
# Created On: 2021-12-17 00:12:10
# Purpose: Generate a fstab file from YAML file
import yaml
import sys
import datetime
import argparse

def read_fstab_yaml(yaml_file):
    try:
        with open(yaml_file, 'r') as stream:
            try:
                data_loaded = yaml.safe_load(stream)
                return data_loaded.get('fstab')
            except yaml.YAMLError as exc:
                print(exc)
                return None
    except Exception as ex:
        print(ex)
        return None

def generate_fstab(yaml_file):
    try:
        data = read_fstab_yaml(yaml_file=yaml_file)
        if data is None:
            print('Error: Invalid YAML file')
            sys.exit(1)
        else:
            entries = ""
            for k,v in data.items():
                file_system = k
                mount_point = v.get('mount')
                file_system_type = v.get('type')
                options = v.get('options')
                _dump = v.get('dump')
                _pass = v.get('pass')

                if v.get('export') is not None:
                    file_system = file_system + ':' + v.get('export')

                if mount_point is None:
                    print('Error: Invalid mount point')
                    sys.exit(1)
                if file_system_type is None:
                    print('Error: Invalid file system type')
                    sys.exit(1)

                if _dump is None:
                    _dump = 0
                if _pass is None:
                    _pass = 0
                if options is None:
                    options = "defaults"
                else:
                    if type(options) is list:
                        options = ",".join(options)
                    else:
                        options = "defaults"

                root_reserve = v.get('root-reserve')
                if root_reserve:
                    if root_reserve not in ("5%", 5):
                        entries += f"# We need to use `sudo tune2fs -m {root_reserve} {file_system}`.\n"
                    options += ",resgid=0,resuid=0"

                if mount_point == "/":
                    _pass = 1

                entry = f"{file_system}\t{mount_point}\t{file_system_type}\t{options}\t{_dump}\t{_pass}"
                entries += entry + '\n'
                
            return entries
    except Exception as e:
        print(e)
        sys.exit(1)

def write_fstab(fstab_file, entries):
    try:
        with open(fstab_file, 'w') as f:
            structure = '# <file system>   <dir/mount-dir>   <type>  <options>       <dump>  <pass>'
            entries = f"\n# Generated by genfstab.py on {datetime.datetime.now()}\n" + structure + "\n#" + "--"*45 + "\n" + entries + "\n#" + "--"*45 + "\n" + f"# End of file\n"
            print(entries)
            f.write(entries)
            print(f"Successfully wrote fstab file to {fstab_file}.")
    except Exception as e:
        print(e)
        sys.exit(1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='YAML to fstab generator.\nUsage: python3 genfstab.py <YAML file>', epilog='Example: python3 genfstab.py fstab.yaml')
    parser.add_argument('--action', help="What type of action you want to do? i.e. show or write or test?")
    parser.add_argument('--yamlFile', help="The YAML file to read from.")
    parser.add_argument('--outputFile', help="The output file to write to.")

    args = parser.parse_args()

    if not args.action and not args.yamlFile:
        exit("action and yamlFile is mandatory.")

    if args.action == "show":
        entries = generate_fstab(yaml_file=args.yamlFile)
        structure = '# <file system>   <dir/mount-dir>   <type>  <options>       <dump>  <pass>'
        entries = f"\n# Generated by genfstab.py on {datetime.datetime.now()}\n" + structure + "\n#" + "--"*45 + "\n" + entries + "\n#" + "--"*45 + "\n" + f"# End of file\n"
        print(entries, "\n\n")
        print("Successfully showed generated content.\n")

    elif args.action == "write":
        if not args.outputFile:
            exit("outputFile is mandatory when writing.")
        write_fstab(fstab_file=args.outputFile, entries=generate_fstab(yaml_file=args.yamlFile))
    elif args.action == "test":
        import test
        import unittest
        suite = unittest.TestLoader().loadTestsFromModule(test)
        unittest.TextTestRunner(verbosity=2).run(suite)
    else:
        exit("action must be one of show, write or test.")